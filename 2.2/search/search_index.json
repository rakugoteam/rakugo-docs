{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Rakugo Dialogue System Docs","text":""},{"location":"#about","title":"About","text":"<p>Rakugo Dialogue System provides:</p> <ul> <li>Save/Load system</li> <li>Dialog system using RakuScript language inspired by Ren'Py Scripting Langue</li> <li>Global variables available from both RakuScript and GDScript levels</li> <li>Global characters variables available from both RakuScript and GDScript levels</li> </ul>"},{"location":"#learn","title":"Learn","text":"<ul> <li>how to use Rakugo Singleton</li> <li>how to make script in RakuScript</li> <li>how to run RakuScript using RakuScriptDialogue</li> <li>how to use RkVars in GDScript and RakuScript</li> <li>how setup export for Godot project that use Rakugo</li> </ul>"},{"location":"#things-you-need-to-know","title":"Things you need to know","text":"<ul> <li> <p>After a Say, Ask or Menu instruction is read,     Rakugo stop reading the script and waits for user input.</p> </li> <li> <p>For now there is need a workaround for changing variables in RakuScript</p> </li> </ul>"},{"location":"export/","title":"How to Setup Export for Godot project that use Rakugo","text":""},{"location":"export/#html5-export-now-works-on-itchio-with-firefox","title":"HTML5 export now works on itch.io with Firefox","text":"<p>Some time ago Rakugo wasn\u2019t working on itch.io with Firefox for html5 export, because we use multi-threading feature. It wasn\u2019t handled on this website. It is now resolved by itch.io!</p>"},{"location":"export/#for-any-export","title":"For Any Export","text":"<p>For any type of export, we need add RakuScript  <code>*.rk</code> files to export settings as by default, only files not recognized by Godot are ignored.</p> <p></p>"},{"location":"rakugo_singleton/","title":"Rakugo Singleton","text":"<p>Rakugo is automatically setup as a singleton when you turn on the Rakugo addon. This means that you can call Rakugo from anywhere in your code.</p>"},{"location":"rakugo_singleton/#full-exemple","title":"Full Exemple","text":"<p>Here is Full Exemple how can you make node connect to Rakugo Dialogue System that parse and execute RakuScript:</p> <pre><code>extends Node\n\nconst file_path = \"res://Timeline.rk\"\n\nfunc _ready():\n  Rakugo.add_custom_regex(\"HW\", \"^hello_world$\")\n\n  Rakugo.sg_custom_regex.connect(_on_custom_regex)\n  Rakugo.sg_say.connect(_on_say)\n  Rakugo.sg_step.connect(_on_step)\n  Rakugo.sg_ask.connect(_on_ask)\n  Rakugo.sg_menu.connect(_on_menu)\n\n  Rakugo.parse_and_execute_script(file_path)\n\nfunc _on_say(character:Dictionary, text:String):\n  prints(\"say\", character.get(\"name\", \"null\"), text)\n\nfunc _on_step():\n  prints(\"Press 'Enter' to continue...\")\n\nfunc _on_ask(character:Dictionary, question:String, default_answer:String):\n  prints(\"ask\", character.get(\"name\", \"null\"), question, default_answer)\n\nfunc _on_menu(choices:Array):\n  prints(\"menu\", choices)\n\nfunc _on_custom_regex(key:String, result:RegExMatch):\n  prints(\"custom regex\", key, result.strings)\n\nfunc _process(delta):\n  if Rakugo.is_waiting_step() and Input.is_action_just_pressed(\"ui_accept\"):\n    Rakugo.do_step()\n\n  if Rakugo.is_waiting_ask_return() and Input.is_action_just_pressed(\"ui_up\"):\n    Rakugo.ask_return(\"Bob\")\n\n  if Rakugo.is_waiting_menu_return() and Input.is_action_just_pressed(\"ui_down\"):\n    Rakugo.menu_return(0)\n</code></pre>"},{"location":"rakugo_singleton/#file_path-and-script_name","title":"file_path and script_name","text":"<p><code>file_path</code> is a path to a file, like : \"res://Timeline.rk\".</p> <p><code>script_name</code> is file name without extension. From \"res://Timeline.rk\" it is \"Timeline\".</p> <p>It works in Rakugo like bellow :</p> <pre><code>var file_path = \"res://Timeline.rk\"\n\nvar script_name = file_path.get_file().get_basename()\n</code></pre> <p>Only methods parse_script or parse_and_execute_script, use a file_path. For others and signals is a script_name.</p>"},{"location":"rakugo_singleton/#references","title":"References","text":""},{"location":"rakugo_singleton/#signals","title":"Signals","text":""},{"location":"rakugo_singleton/#sg_say","title":"sg_say","text":"<ul> <li>args:<code>character:Dictionary, text:String</code></li> </ul> <p>Send when a Say instruction is executed then Rakugo waiting call of do_step</p> <pre><code>func _ready():\n  Rakugo.sg_say.connect(_on_say)\n\nfunc _on_say(character:Dictionary, text:String):\n  prints(\"say\", character.get(\"name\", \"null\"), text)\n</code></pre>"},{"location":"rakugo_singleton/#sg_step","title":"sg_step","text":"<p>Send after a Say instruction is executed.</p> <pre><code>func _ready():\n  Rakugo.sg_step.connect(_on_step)\n\nfunc _on_step():\n  prints(\"Press 'Enter' to continue...\")\n</code></pre>"},{"location":"rakugo_singleton/#sg_ask","title":"sg_ask","text":"<ul> <li>args:<code>character:Dictionary, question:String, default_answer:String</code></li> </ul> <p>Send when a Ask instruction is executed then Rakugo waiting call of ask_return.</p> <pre><code>func _ready():\n  Rakugo.sg_ask.connect(_on_ask)\n\nfunc _on_ask(character:Dictionary, question:String, default_answer:String):\n  prints(\"ask\", character.get(\"name\", \"null\"), question, default_answer)\n</code></pre>"},{"location":"rakugo_singleton/#sg_menu","title":"sg_menu","text":"<ul> <li>args:<code>choices:Array</code></li> </ul> <p>Send when a Menu instruction is executed then Rakugo waiting call of menu_return.</p> <pre><code>func _ready():\n  Rakugo.sg_menu.connect(_on_menu)\n\nfunc _on_menu(choices:PackedStringArray):\n  prints(\"menu\", choices)\n</code></pre>"},{"location":"rakugo_singleton/#sg_execute_script_start","title":"sg_execute_script_start","text":"<ul> <li>args:<code>script_name:String</code></li> </ul> <p>Send when the script with this <code>script_name</code> execution is started.</p> <pre><code>func _ready():\n  Rakugo.sg_execute_script_start.connect(_on_execute_script_start)\n\nfunc _on_execute_script_start(script_name:String):\n  prints(\"execute_script_start\", script_name)\n</code></pre>"},{"location":"rakugo_singleton/#sg_execute_script_finished","title":"sg_execute_script_finished","text":"<ul> <li>args:<code>script_name:String, error_str:String</code></li> </ul> <p>Send when the script with this <code>script_name</code> execution is finished.</p> <p>If execution fail <code>error_str</code> contains error message, instead is empty.</p> <pre><code>func _ready():\n  Rakugo.sg_execute_script_finished.connect(_on_execute_script_finished)\n\nfunc _on_execute_script_finished(script_name:String, error_str:String):\n  prints(\"execute_script_finished\", script_name)\n</code></pre>"},{"location":"rakugo_singleton/#sg_custom_regex","title":"sg_custom_regex","text":"<ul> <li>args:<code>key:String, result:RegExMatch</code></li> </ul> <p>Send when a custom instruction is executed.</p> <p>You can add one with add_custom_regex.</p> <pre><code>func _ready():\n  Rakugo.parser_add_regex_at_runtime(\"HW\", \"^hello_world$\")\n  Rakugo.sg_custom_regex.connect(_on_custom_regex)\n  ...\n  Rakugo.parse_and_execute_script(file_path)\n\nfunc _on_custom_regex(key:String, result:RegExMatch):\n  match(key):\n    \"HW\":\n      prints(\"regex hello, world !\")\n</code></pre>"},{"location":"rakugo_singleton/#sg_variable_changed","title":"sg_variable_changed","text":"<ul> <li>args:<code>var_name:String, value:Variant</code></li> </ul> <p>Send when a Rakugo's variable is changed.</p>"},{"location":"rakugo_singleton/#sg_character_variable_changed","title":"sg_character_variable_changed","text":"<ul> <li>args:<code>character_tag:String, var_name:String, value:Variant</code></li> </ul> <p>Send when a Rakugo's character variable is changed.</p>"},{"location":"rakugo_singleton/#methods","title":"Methods","text":""},{"location":"rakugo_singleton/#replace_variables","title":"replace_variables","text":"<ul> <li>params:<code>text:String</code></li> </ul> <p>Will replace any <code>&lt;var_name&gt;</code> with value of RakugoVar with <code>var_name</code> in given script.</p> <p>Note</p> <p>String is replaced with a value when you use/read it, not on assignment.</p> <pre><code># example\nRakugo.replace_variables(\"You have &lt;player.life&gt; life points left\")\n# will - return:`#!gdscript \"You have 5 life points left\"`\n</code></pre>"},{"location":"rakugo_singleton/#set_variable","title":"set_variable","text":"<ul> <li>params:<code>var_name:String, value:Variant</code></li> </ul> <pre><code>## set or create a global variable\nRakugo.set_variable(\"life\", 5)\n\n## set or create a variable on character\nRakugo.set_variable(\"Sy.life\", 5)\n</code></pre>"},{"location":"rakugo_singleton/#get_variable","title":"get_variable","text":"<ul> <li>params:<code>var_name:String</code></li> <li>return:<code>Variant</code></li> </ul> <p>Return <code>null</code> if not found or character with this tag does not exist. Print an error in this case.</p> <pre><code>## get a global variable\nvar life = Rakugo.get_variable(\"life\")\n\n## get a character's variable\nvar sy_life = Rakugo.get_variable(\"Sy.life\")\n</code></pre>"},{"location":"rakugo_singleton/#has_variable","title":"has_variable","text":"<ul> <li>params:<code>var_name:String</code></li> <li>return:<code>bool</code></li> </ul> <p>Return <code>false</code> if not found or character with this tag does not exist. Print an error in this case.</p> <pre><code>## check if a global variable exists\nvar has_life = Rakugo.has_variable(\"life\")\n\n## check if a character's variable exists\nvar has_sy_life = Rakugo.has_variable(\"Sy.life\")\n</code></pre>"},{"location":"rakugo_singleton/#define_character","title":"define_character","text":"<ul> <li>params:<code>char_tag:String, char_name:String</code></li> </ul> <pre><code>Rakugo.define_character(\"Sy\", \"Sylvie\")\n</code></pre>"},{"location":"rakugo_singleton/#get_character","title":"get_character","text":"<ul> <li>params:<code>char_tag:String</code></li> <li>return:<code>Dictionary</code></li> </ul> <p>If a character with this <code>char_tag</code> is not found return an empty Dictionary and print an error.</p> <pre><code>var sy = Rakugo.get_character(\"Sy\")\n</code></pre>"},{"location":"rakugo_singleton/#get_narrator","title":"get_narrator","text":"<ul> <li>return:<code>Dictionary</code></li> </ul> <p>Returns character with name defined in Project Settings: addons/rakugo/narrator/name</p>"},{"location":"rakugo_singleton/#add_custom_regex","title":"add_custom_regex","text":"<ul> <li>params:<code>key:String, regex:String</code></li> </ul> <p>Add new custom instruction to RkScript.</p> <p>When this custom instruction is read it send signal sg_custom_regex.</p> <p>Use it before parse_script or parse_and_execute_script.</p> <pre><code>func _ready():\n  Rakugo.parser_add_regex_at_runtime(\"HW\", \"^hello_world$\")\n  Rakugo.sg_custom_regex.connect(_on_custom_regex)\n  ...\n  Rakugo.parse_and_execute_script(file_path)\n\nfunc _on_custom_regex(key:String, result:RegExMatch):\n  match(key):\n    \"HW\": prints(\"regex hello, world !\")\n</code></pre> <p>You can use these Rakugo tokens in your regex :</p> <pre><code>NAME = \"[a-zA-Z][a-zA-Z_0-9]*\",\nNUMERIC = \"-?[1-9][0-9.]*\",\nSTRING = \"\\\".*\\\"\",\n</code></pre> <p>Example : <code>^show_char (?&lt;tag&gt;{NAME})$</code></p> <p>GDocs about regex : https://docs.godotengine.org/en/stable/classes/class_regex.html</p>"},{"location":"rakugo_singleton/#parse_script","title":"parse_script","text":"<ul> <li>params:<code>file_path:String</code></li> <li>return:<code>Error</code></li> </ul> <p>Parse a script and store it. You can execute it with execute_script.</p> <p>If all goes well return <code>OK</code>. If not print an error and return <code>ERR_FILE_CANT_OPEN</code> if file can not be opened, or <code>FAILED</code> in other cases.</p> <pre><code>const file_path = \"res://Timeline.rk\"\n\nfunc _ready():\n  Rakugo.parse_script(file_path)\n</code></pre>"},{"location":"rakugo_singleton/#execute_script","title":"execute_script","text":"<ul> <li>params:<code>script_name:String</code></li> <li>return:<code>Error</code></li> </ul> <p>Execute a script previously registered with parse_script.</p> <p>If all goes well return <code>OK</code>, print an error and return <code>FAILED</code> instead.</p> <p>You do not have to use parse_script and execute_script at same time.</p> <pre><code>const file_path = \"res://Timeline.rk\"\nconst script_name = file_path.get_file().get_basename()\n\nfunc _ready():\n  Rakugo.parse_script(file_path)\n\nfunc _process(_delta):\n  ...\n  Rakugo.execute_script(script_name)\n</code></pre>"},{"location":"rakugo_singleton/#parse_and_execute_script","title":"parse_and_execute_script","text":"<ul> <li>params:<code>file_path:String</code></li> </ul> <p>Do parse_script, if return <code>OK</code> then do execute_script.</p>"},{"location":"rakugo_singleton/#save_game","title":"save_game","text":"<ul> <li>params:<code>save_name:String = \"quick\"</code></li> </ul> <p>Save all variables, characters, script_name and last line readed on last executed script, in user://save/save_name/save.json file.</p>"},{"location":"rakugo_singleton/#load_game","title":"load_game","text":"<ul> <li>params:<code>save_name:String = \"quick\"</code></li> </ul> <p>Load all variables, characters, script_name and last line read on last executed script, from user://save/save_name/save.json file if existed.</p> <p>Parse the script with <code>script_name</code>. To run it use resume_loaded_script (just bellow).</p>"},{"location":"rakugo_singleton/#resume_loaded_script","title":"resume_loaded_script","text":"<p>Run the loaded script from last line readed.</p>"},{"location":"rakugo_singleton/#is_waiting_step","title":"is_waiting_step","text":"<ul> <li>return:<code>bool</code></li> </ul> <p>Returns <code>true</code> when Rakugo waiting call of do_step.</p>"},{"location":"rakugo_singleton/#do_step","title":"do_step","text":"<p>Use it when is_waiting_step return <code>true</code>, to continue script reading process.</p>"},{"location":"rakugo_singleton/#is_waiting_ask_return","title":"is_waiting_ask_return","text":"<ul> <li>return:<code>bool</code></li> </ul> <p>Returns <code>true</code> when Rakugo waiting call of ask_return.</p>"},{"location":"rakugo_singleton/#ask_return","title":"ask_return","text":"<ul> <li>params:<code>result:Variant</code></li> </ul> <p>Use it when is_waiting_ask_return return <code>true</code>, to continue script reading process.</p> <p><code>result</code> is the answer to the question ask by sg_ask.</p>"},{"location":"rakugo_singleton/#is_waiting_menu_return","title":"is_waiting_menu_return","text":"<ul> <li>return:<code>bool</code></li> </ul> <p>Returns <code>true</code> when Rakugo waiting call of menu_return.</p>"},{"location":"rakugo_singleton/#menu_return","title":"menu_return","text":"<ul> <li>params:<code>index:int</code></li> </ul> <p>Use it when is_waiting_menu_return return <code>true</code>, to continue script reading process.</p> <p><code>index</code> is the index of chosen choice in the choices array given by sg_menu.</p>"},{"location":"rakugo_variables_workaround/","title":"Rakugo Variables Workaround","text":""},{"location":"rakugo_variables_workaround/#problem","title":"Problem","text":"<p>Currently in RakuScript we can't do stuff like this: <pre><code>a = 1\nb = a + 1\nc = 1 - 2\nd = 2 * 2\ne = 2 / 2\n</code></pre></p>"},{"location":"rakugo_variables_workaround/#temporary-solution","title":"Temporary Solution","text":"<p>For now thanks to new features in 2.2, we can workaround this using variable assignments: <pre><code>a = 1\n\n# b = a + 1\nb = a\nb += 1\n\n# c = 1 - 2\nc = 1\nc -= 2\n\n# d = 2 * 2\nd = 2\nd *= 2\n\n# e = 2 / 2\ne = 1\ne /= 2\n</code></pre></p>"},{"location":"rakuscript/","title":"RakuScript","text":"<p>RakuScript is Rakugo Dialogue scripting language inspired by Ren'Py Scripting Language.</p> <p>You can use with RakuScriptDialogue node or using:</p> <pre><code>Rakugo.parse_script(\"path/to/raku_script.rk\")\n</code></pre>"},{"location":"rakuscript/#character","title":"Character","text":"RakuScriptGDScript <pre><code>character [char_tag] [char_name]\n</code></pre> <pre><code>Rakugo.define_character(char_tag, char_name)\n</code></pre> <p>Create/Define a new character with this <code>char_tag</code> and <code>char_name</code></p>"},{"location":"rakuscript/#character-example","title":"Character Example","text":"<p><code>character Gd Godot</code></p>"},{"location":"rakuscript/#variable","title":"Variable","text":"<p>Note</p> <ul> <li> <p>Setting variable create a new variable with this var_name and this value assigned.</p> </li> <li> <p>If this variable already exist, value is replaced by new one.</p> </li> </ul> <p>Note</p> <p>Read more about RakugoVars</p> RakuScriptGDScript <pre><code># set variable\n[var_name] = [value]\n\n# get variable\n[other_var_name]\n\n# get variable from character\n[char_tag].[var_name]\n</code></pre> <pre><code># set variable\nRakugo.set_variable(var_name, value)\n\n# get variable\nRakugo.get_variable(other_var_name)\n\n# get variable from character\nRakugo.get_variable(char_tag.var_name)\n</code></pre>"},{"location":"rakuscript/#variable-example","title":"Variable Example","text":"<pre><code># create / set variable\nlife = 5\n\n# assign value form other variable\nlife = max_life\n\n# assign value from character\nlife = Gd.max_life\n</code></pre>"},{"location":"rakuscript/#characters-variable","title":"Character's variable","text":"<pre><code># set variable\n[char_tag].[var_name] = [value]\n\n# get variable from character\n[char_tag].[var_name]\n</code></pre> <p>Create a new variable with this var_name on character with this <code>char_tag</code>, and this value assigned.</p> <p>If this variable already exist on this character, value is replaced by new one.</p>"},{"location":"rakuscript/#characters-variable-example","title":"Character's variable example","text":"<pre><code># create / set character variable\nGd.friendship = 5\n\n# assign value from other variable\nGd.friendship = max_friendship\n\n# assign value from character\nGd.friendship = Gd.max_friendship\n</code></pre>"},{"location":"rakuscript/#say","title":"Say","text":"<p><code>[char_tag] [String]</code></p> <p>Character with this char_tag say String</p> <p>When Say is executed, a signal say is send with dictionary of data for the character with this char_tag and this String in parameter.</p> <p>If no character with this char_tag is found, signal is send with an empty dictionary.</p> <p>After Say is executed, Rakugo automatically waiting, it send a step signal.</p>"},{"location":"rakuscript/#say-example","title":"Say Example","text":"<pre><code>Gd \"Hello !\"\n</code></pre>"},{"location":"rakuscript/#no-character","title":"No character","text":"<p><code>[String]</code></p> <p>Say String</p> <p>When Say is executed, a signal say is send with empty dictionary and this String in parameter.</p>"},{"location":"rakuscript/#example-of-say-with-no-character","title":"Example of say with no character","text":"<p><code>\"Hello, world !\"</code></p>"},{"location":"rakuscript/#use-variables","title":"Use variables","text":"<p><code>&lt;[var_name]&gt; or &lt;[char_tag].[var_name]&gt;</code></p> <p>You can use variables in Say, Rakugo replace them by their values in String before send signal say.</p>"},{"location":"rakuscript/#example-of-using-variables","title":"Example of using variables","text":"<pre><code>\"My name is &lt;Gd.name&gt;, and I have &lt;life&gt; point of life\"\n</code></pre>"},{"location":"rakuscript/#ask","title":"Ask","text":"<pre><code>[var_name] = ? [question]\n</code></pre> <pre><code>[var_name] = ? [question] [placeholder]\n</code></pre> <pre><code>[var_name] = ? [character_tag] [question] [placeholder]\n</code></pre> <p>It can be used get user input as string, for example you can use it to ask user for a his/her/their name.</p> <p>After a Ask is executed, Rakugo waiting call of ask_return signal:</p> <pre><code>Rakugo.ask_return(answer)\n</code></pre>"},{"location":"rakuscript/#ask-example","title":"Ask Example","text":"<pre><code>player.name = ? \"What is your name ?\"\nplayer.age = ? \"How old are you ?\"\n</code></pre>"},{"location":"rakuscript/#menu","title":"Menu","text":"<p>It can be used to create a ui that switches between different branches of dialogue tree.</p> <pre><code>menu menu_emily:\n    \"Talk with emily\" &gt; emily_talk\n    \"Wait\"\n    \"Blop\" &gt; test_dialog\n</code></pre> <p>It must start it from menu menu_name: <code>\"Choice\"</code> - is choice and <code>&gt;</code> is used to jump to other dialog/label or menu. Menu block ends with empty line.</p> <p>After a Menu is executed, Rakugo waiting call of ask_menu signal:</p> <pre><code>Rakugo.ask_menu(branch_index)\n</code></pre>"},{"location":"rakuscript/#jump","title":"Jump","text":"<pre><code>jump [label_name] or jump [menu_label_name]\n</code></pre> <p>It will jump dialogue branch with given label_name or menu_label_name.</p>"},{"location":"rakuscript/#jump-example","title":"Jump Example","text":"<pre><code>jump start\n\njump shop_menu\n</code></pre>"},{"location":"rakuscript/#jump-if","title":"Jump If","text":"<pre><code>jump [label_name] if [condition]\n</code></pre> <p>It will jump dialogue branch with given label_name or menu_label_name if condition is true.</p>"},{"location":"rakuscript/#jump-if-example","title":"Jump If Example","text":"<pre><code>jump emily_date if emily.relationship &gt;= 20\n</code></pre>"},{"location":"rakuscript_dialogue/","title":"RakuScriptDialogue","text":"<p>Extends Node</p> <p>Simple node to load and run Raku Script</p>"},{"location":"rakuscript_dialogue/#vars","title":"Vars","text":"<ul> <li>raku_script</li> <li>starting_label_name</li> <li>auto_start</li> </ul>"},{"location":"rakuscript_dialogue/#funcs","title":"Funcs","text":"<ul> <li>start_dialogue()</li> <li>start_dialogue_from_label(label_name : String)</li> </ul>"},{"location":"rakuscript_dialogue/#vars_1","title":"Vars","text":""},{"location":"rakuscript_dialogue/#raku_script","title":"raku_script","text":"<p>default value : <code>String</code></p> <p>Raku Script (*.rk) to load and run</p>"},{"location":"rakuscript_dialogue/#starting_label_name","title":"starting_label_name","text":"<p>default value : <code>\"\"</code></p> <p>Label to start raku_script when using start_dialogue()</p>"},{"location":"rakuscript_dialogue/#auto_start","title":"auto_start","text":"<p>default value : <code>false</code></p> <p>If true calls start_dialogue() when scene is ready</p>"},{"location":"rakuscript_dialogue/#funcs_1","title":"Funcs","text":""},{"location":"rakuscript_dialogue/#start_dialogue","title":"start_dialogue()","text":"<p>Starts raku_script from start_dialogue_from_label </p>"},{"location":"rakuscript_dialogue/#start_dialogue_from_labellabel_name-string","title":"start_dialogue_from_label(label_name : String)","text":"<p>Starts raku_script from given label</p>"},{"location":"rkvars/","title":"How use Rakugo Variables","text":"<p>Rakugo Variables are called RkVar for short. They are global, and accessible from both RkScript and GDScript.</p> RakuScriptGDScript <p>You can define var in RakuScript file, like this: <pre><code>player.life = 10\n</code></pre> You can access it in any RakuScript: <pre><code>narrator \"You have &lt;player.life&gt; life points left\"\n</code></pre></p> <p>You can change already existing var: <pre><code>player.life += 5\n</code></pre></p> <p>Currently in RakuScript we can't do stuff like this: <pre><code>a = 1\nb = a + 1\nc = 1 - 2\nd = 2 * 2\ne = 2 / 2\n</code></pre></p> <p>For now thanks to new features in 2.2, we can workaround this using variable assignments: <pre><code>a = 1\n\n# b = a + 1\nb = a\nb += 1\n\n# c = 1 - 2\nc = 1\nc -= 2\n\n# d = 2 * 2\nd = 2\nd *= 2\n\n# e = 2 / 2\ne = 1\ne /= 2\n</code></pre></p> <p>In GDScript you can define RkVars like this: <pre><code>Rakugo.set_variable(\"player.life\", 10)\n</code></pre> You can access it in any RakuScript: <pre><code>Rakugo.get_variable(\"player.life\")\n</code></pre> You can change it: <pre><code>var life = Rakugo.get_variable(\"player.life\")\nlife += 5\nRakugo.set_variable(\"player.life\", life)\n</code></pre> You can display text with RkVar using Label like this: <pre><code>expand Label\n\nfunc update_text():\n    var life =  Rakugo.get_variable(\"player.life\")\n    text = \"You have %d life points left\" % life\n\n    # or one-line version:\n    text = Rakugo.replace_variables(\"You have &lt;player.life&gt; life points left\")\n</code></pre> To auto-update text in label using <code>sg_variable_changed</code> signal:</p> <pre><code>expand Label\n\nfunc _ready():\n    Rakugo.sg_variable_changed.connect(update_text)\n\nfunc update_text(var_name:String, value):\n    if var_name == \"player.life\":\n        text = text = \"You have %d life points left\" % value\n\n        # or one-line version:\n        text = Rakugo.replace_variables(\"You have &lt;player.life&gt; life points left\")\n</code></pre>"}]}