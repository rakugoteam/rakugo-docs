{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Rakugo Core Docs !","text":""},{"location":"#about","title":"About","text":"<p>Rakugo Core is core of Rakugo Project is a:</p> <ul> <li>Save/Load system</li> <li>Dialog system using RakuScript language inspired by Ren'Py Scripting Langue</li> </ul>"},{"location":"#learn","title":"Learn","text":"<ul> <li>how to use Rakugo Singleton</li> <li>how to make script in RakuScript</li> <li>how setup export for Godot project that use Rakugo</li> </ul>"},{"location":"#things-you-need-to-know","title":"Things you need to know","text":"<ul> <li>After a Say, Ask or Menu instruction is read,  Rakugo stop reading the script and waits for user input.</li> </ul>"},{"location":"export/","title":"How to Setup Export for Godot project that use Rakugo","text":""},{"location":"export/#html-5-export","title":"HTML 5 Export","text":"<p>There is problem with HTML 5 export of Rakugo for Firefox: https://itch.io/post/5713938</p> <p>We need to setup Variant/Export Type as Threads in HTML5 export settings.</p> <p></p>"},{"location":"export/#all-exports","title":"All Exports","text":"<p>For any type of export, we need add RakuScript  <code>*.rk</code> files to export settings as by default, only files not recognized by Godot are ignored.</p> <p></p>"},{"location":"rakugo_singleton/","title":"Rakugo Singleton","text":"<p>Rakugo is automatically setup as a singleton when you turn on the Rakugo addon. This means that you can call Rakugo from anywhere in your code.</p>"},{"location":"rakugo_singleton/#full-exemple","title":"Full Exemple","text":"<p>Here is Full Exemple how can you make node connect to Rakugo Core that parse and execute RakuScript:</p> <pre><code>extends Node\nconst file_path = \"res://Timeline.rk\"\nfunc _ready():\nRakugo.parser_add_regex_at_runtime(\"HW\", \"^hello_world$\")\nRakugo.connect(\"parser_unhandled_regex\", self, \"_on_parser_unhandled_regex\")\nRakugo.connect(\"say\", self, \"_on_say\")\nRakugo.connect(\"step\", self, \"_on_step\")\nRakugo.connect(\"ask\", self, \"_on_ask\")\nRakugo.connect(\"menu\", self, \"_on_menu\")\nRakugo.parse_and_execute_script(file_path)\nfunc _on_say(character:Dictionary, text:String):\nprints(\"say\", character.get(\"name\", \"null\"), text)\nfunc _on_step():\nprints(\"Press 'Enter' to continue...\")\nfunc _on_ask(character:Dictionary, question:String, default_answer:String):\nprints(\"ask\", character.get(\"name\", \"null\"), question, default_answer)\nfunc _on_menu(choices:Array):\nprints(\"menu\", choices)\nfunc _on_parser_unhandled_regex(key:String, result:RegExMatch):\nmatch(key):\n\"HW\":\nprints(\"regex hello, world !\")\nfunc _process(delta):\nif Rakugo.is_waiting_step() and Input.is_action_just_pressed(\"ui_accept\"):\nRakugo.do_step()\nif Rakugo.is_waiting_ask_return() and Input.is_action_just_pressed(\"ui_up\"):\nRakugo.ask_return(\"Bob\")\nif Rakugo.is_waiting_menu_return() and Input.is_action_just_pressed(\"ui_down\"):\nRakugo.menu_return(0)\n</code></pre>"},{"location":"rakugo_singleton/#references","title":"References","text":""},{"location":"rakugo_singleton/#signals","title":"Signals","text":""},{"location":"rakugo_singleton/#say","title":"say","text":"<p>params: (character:Dictionary, text:String)</p> <p>Send when a Say instruction is executed then Rakugo waiting call of do_step</p> <pre><code>func _ready():\nRakugo.connect(\"say\", self, \"_on_say\")\nfunc _on_say(character:Dictionary, text:String):\nprints(\"say\", character.get(\"name\", \"null\"), text)\n</code></pre>"},{"location":"rakugo_singleton/#step","title":"step","text":"<p>Send after a Say instruction is executed.</p>"},{"location":"rakugo_singleton/#ask","title":"ask","text":"<p>params: (character:Dictionary, question:String, default_answer:String)</p> <p>Send when a Ask instruction is executed then Rakugo waiting call of ask_return.</p> <pre><code>func _ready():\nRakugo.connect(\"ask\", self, \"_on_ask\")\nfunc _on_ask(character:Dictionary, question:String, default_answer:String):\nprints(\"ask\", character.get(\"name\", \"null\"), question, default_answer)\n</code></pre>"},{"location":"rakugo_singleton/#menu","title":"menu","text":"<p>params: (choices:Array)</p> <p>Send when a Menu instruction is executed then Rakugo waiting call of menu_return.</p> <pre><code>func _ready():\nRakugo.connect(\"menu\", self, \"_on_menu\")\nfunc _on_menu(choices:Array):\nprints(\"menu\", choices)\n</code></pre>"},{"location":"rakugo_singleton/#parser_unhandled_regex","title":"parser_unhandled_regex","text":"<p>params: (key:String, result:RegExMatch)</p>"},{"location":"rakugo_singleton/#methods","title":"Methods","text":""},{"location":"rakugo_singleton/#set_variable","title":"set_variable","text":"<p>params: (var_name:String, value:Variant)</p> <pre><code># set or create a global variable\nRakugo.set_variable(\"life\", 5)\n# set or create a variable on character\nRakugo.set_variable(\"Sy.life\", 5)\n</code></pre>"},{"location":"rakugo_singleton/#get_variable","title":"get_variable","text":"<p>params: (var_name:String) return: Variant</p> <pre><code># get a global variable\nvar life = Rakugo.get_variable(\"life\")\n# get a character's variable\nvar sy_life = Rakugo.get_variable(\"Sy.life\")\n</code></pre>"},{"location":"rakugo_singleton/#has_variable","title":"has_variable","text":"<p>params: (var_name:String) return: bool</p> <p>Only works with global variable.</p>"},{"location":"rakugo_singleton/#define_character","title":"define_character","text":"<p>params: (char_tag:String, char_name:String)</p> <pre><code># define/create a new character\nRakugo.define_character(\"Sy\", \"Sylvie\")\n</code></pre>"},{"location":"rakugo_singleton/#get_character","title":"get_character","text":"<p>params: (char_tag:string) return: Dictionary</p> <p>If a character with this char_tag is not found return an empty Dictionary and print an error.</p> <pre><code>var sy = Rakugo.get_character(\"Sy\")\n</code></pre>"},{"location":"rakugo_singleton/#get_narrator","title":"get_narrator","text":"<p>return: Dictionary</p> <p>Returns character with name defined in Project Settings: addons/rakugo/narrator/name</p>"},{"location":"rakugo_singleton/#parser_add_regex_at_runtime","title":"parser_add_regex_at_runtime","text":"<p>params: (key:String, regex:String)</p>"},{"location":"rakugo_singleton/#parse_script","title":"parse_script","text":"<p>params: (file_path:String) return: Error</p> <p>Parse a script and store it. You can execute it with execute_script.</p> <p>If all goes well return OK. If not print an error and return ERR_FILE_CANT_OPEN if file can not be opened, or FAILED in other cases.</p> <pre><code>const file_path = \"res://Timeline.rk\"\nfunc _ready():\nRakugo.parse_script(file_path)\n</code></pre>"},{"location":"rakugo_singleton/#execute_script","title":"execute_script","text":"<p>params: (file_name:String) return: Error</p> <p>Execute a script previously registered with parse_script.</p> <p>If all goes well return OK, print an error and return FAILED instead.</p> <p>file_name, is file_path without folder_path and extension.</p> <p>file_path: \"res://Timeline.rk\"</p> <p>file_name: \"Timeline\"</p> <p>You can use file_path.get_file().get_basename().</p> <p>You do not have to use parse_script and execute_script at same time.</p> <pre><code>const file_path = \"res://Timeline.rk\"\nconst file_name = file_path.get_file().get_basename()\nfunc _ready():\nRakugo.parse_script(file_path)\nfunc _process(_delta):\n...\nRakugo.execute_script(file_name)\n</code></pre>"},{"location":"rakugo_singleton/#parse_and_execute_script","title":"parse_and_execute_script","text":"<p>params: (file_path:String)</p> <p>Do parse_script and execute_script at same time.</p>"},{"location":"rakugo_singleton/#save_game","title":"save_game","text":"<p>params: (save_name:String = \"quick\")</p> <p>Save all variables and characters in user://save/save_name/save.json file.</p>"},{"location":"rakugo_singleton/#load_game","title":"load_game","text":"<p>params: (save_name:String = \"quick\")</p> <p>Load all variables and characters from user://save/save_name/save.json file if existed.</p>"},{"location":"rakugo_singleton/#is_waiting_step","title":"is_waiting_step","text":"<p>return: bool</p> <p>Returns true when Rakugo waiting call of do_step.</p>"},{"location":"rakugo_singleton/#do_step","title":"do_step","text":"<p>Use it when is_waiting_step return true, to continue script reading process.</p>"},{"location":"rakugo_singleton/#is_waiting_ask_return","title":"is_waiting_ask_return","text":"<p>return: bool</p> <p>Returns true when Rakugo waiting call of ask_return.</p>"},{"location":"rakugo_singleton/#ask_return","title":"ask_return","text":"<p>params: (result:Variant)</p>"},{"location":"rakugo_singleton/#is_waiting_menu_return","title":"is_waiting_menu_return","text":"<p>return: bool</p> <p>Returns true when Rakugo waiting call of menu_return.</p>"},{"location":"rakugo_singleton/#menu_return","title":"menu_return","text":"<p>params: (index:int)</p>"},{"location":"rakuscript/","title":"RakuScript","text":"<p>RakuScript is Rakugo Dialogue scripting language inspired by Ren'Py Scripting Language.</p> <p>You can use with RakuScriptDialogue node or using:</p> <pre><code>Rakugo.parse_script(\"path/to/raku_script.rk\")\n</code></pre>"},{"location":"rakuscript/#full-example","title":"Full Example","text":""},{"location":"rakuscript/#character","title":"Character","text":"<p><code>character [char_tag] [char_name]</code></p> <p>Equivalent in GDScript:</p> <pre><code>Rakugo.define_character(char_tag, char_name)\n</code></pre> <p>Create/Define a new character with this char_tag and char_name</p>"},{"location":"rakuscript/#example","title":"Example","text":"<p><code>character Gd Godot</code></p>"},{"location":"rakuscript/#variable","title":"Variable","text":"<pre><code># set variable\n[var_name] = [value]\n\n# get variable\n[other_var_name]\n\n# get variable from character\n[char_tag].[var_name]\n</code></pre> <p>Equivalent in GDScript:</p> <pre><code># set variable\nRakugo.set_variable(var_name, value)\n# get variable\nRakugo.get_variable(other_var_name)\n# get variable from character\nRakugo.get_variable(char_tag.var_name)\n</code></pre> <p>Create a new variable with this var_name and this value assigned.</p> <p>A var_name should be 2 or more characters long ( Issue is already opened and we work on fixing it ).</p> <p>If other_var_name or char_tag.var_name is defined, use value of other_var_name or char_tag.var_name.</p> <p>If this variable already exist, value is replaced by new one.</p>"},{"location":"rakuscript/#variable-example","title":"Variable Example","text":"<pre><code># create / set variable\nlife = 5\n\n# assign value form other variable\nlife = max_life\n\n# assign value from character\nlife = Gd.max_life\n</code></pre>"},{"location":"rakuscript/#characters-variables","title":"Character's Variables","text":"<pre><code># set variable\n[char_tag].[var_name] = [value]\n\n# get variable from character\n[char_tag].[var_name]\n</code></pre> <p>Create a new variable with this var_name on character with this char_tag, and this value assigned.</p> <p>If other_var_name or char_tag.var_name is defined, use value of other_var_name or char_tag.var_name.</p> <p>If this variable already exist on this character, value is replaced by new one.</p>"},{"location":"rakuscript/#variables-example","title":"Variables Example","text":"<pre><code># create / set character variable\nGd.friendship = 5\n\n# assign value from other variable\nGd.friendship = max_friendship\n\n# assign value from character\nGd.friendship = Gd.max_friendship\n</code></pre>"},{"location":"rakuscript/#say","title":"Say","text":"<p><code>[char_tag] [String]</code></p> <p>Character with this char_tag say String</p> <p>When Say is executed, a signal say is send with dictionary of data for the character with this char_tag and this String in parameter.</p> <p>If no character with this char_tag is found, signal is send with an empty dictionary.</p> <p>After Say is executed, Rakugo automatically waiting, it send a step signal.</p>"},{"location":"rakuscript/#say-example","title":"Say Example","text":"<pre><code>Gd \"Hello !\"\n</code></pre>"},{"location":"rakuscript/#no-character","title":"No character","text":"<p><code>[String]</code></p> <p>Say String</p> <p>When Say is executed, a signal say is send with empty dictionary and this String in parameter.</p>"},{"location":"rakuscript/#no-character-example","title":"No character Example","text":"<p><code>\"Hello, world !\"</code></p>"},{"location":"rakuscript/#use-variables","title":"Use variables","text":"<p><code>&lt;[var_name]&gt; or &lt;[char_tag].[var_name]&gt;</code></p> <p>You can use variables in Say, Rakugo replace them by their values in String before send signal say.</p>"},{"location":"rakuscript/#example-of-use-variables","title":"Example of use variables","text":"<pre><code>\"My name is &lt;Gd.name&gt;, and I have &lt;life&gt; point of life\"\n</code></pre>"},{"location":"rakuscript/#ask","title":"Ask","text":"<pre><code>[var_name] = ? [question]\n</code></pre> <pre><code>[var_name] = ? [question] [placeholder]\n</code></pre> <pre><code>[var_name] = ? [character_tag] [question] [placeholder]\n</code></pre> <p>It can be used get user input as string, for example you can use it to ask user for a his/her/their name.</p> <p>After a Ask is executed, Rakugo waiting call of ask_return signal:</p> <pre><code>Rakugo.ask_return(answer)\n</code></pre>"},{"location":"rakuscript/#ask-examples","title":"Ask Examples","text":"<pre><code>player.name = ? \"What is your name ?\"\nplayer.age = ? \"How old are you ?\"\n</code></pre>"},{"location":"rakuscript/#menu","title":"Menu","text":"<p>It can be used to create a ui that switches between different branches of dialogue tree.</p> <pre><code>menu menu_emily:\n  \"Talk with emily\" &gt; emily_talk\n  \"Wait\"\n  \"Blop\" &gt; test_dialog\n</code></pre> <p>It must start it from menu menu_name: <code>\"Choice\"</code> - is choice and <code>&gt;</code> is used to jump to other dialog/label or menu. Menu block ends with empty line.</p> <p>After a Menu is executed, Rakugo waiting call of ask_menu signal:</p> <pre><code>Rakugo.ask_menu(branch_index)\n</code></pre>"},{"location":"rakuscript/#jump","title":"Jump","text":"<pre><code>jump [label_name] or jump [menu_label_name]\n</code></pre> <p>It will jump dialogue branch with given label_name or menu_label_name.</p>"},{"location":"rakuscript/#jump-example","title":"Jump Example","text":"<pre><code>jump start\n\njump shop_menu\n</code></pre>"},{"location":"rakuscript/#jump-if","title":"Jump If","text":"<pre><code>jump [label_name] if [condition]\n</code></pre> <p>It will jump dialogue branch with given label_name or menu_label_name if condition is true.</p>"},{"location":"rakuscript/#jump-if-example","title":"Jump If Example","text":"<pre><code>jump emily_date if emily.relationship &gt;= 20\n</code></pre>"}]}